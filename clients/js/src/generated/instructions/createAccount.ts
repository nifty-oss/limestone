/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { resolveAccount } from '../../hooked';
import { EPHEMERIS_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export type CreateAccountInstruction<
  TProgram extends string = typeof EPHEMERIS_PROGRAM_ADDRESS,
  TAccountFrom extends string | IAccountMeta<string> = string,
  TAccountTo extends string | IAccountMeta<string> = string,
  TAccountBase extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFrom extends string
        ? WritableSignerAccount<TAccountFrom> & IAccountSignerMeta<TAccountFrom>
        : TAccountFrom,
      TAccountTo extends string ? WritableAccount<TAccountTo> : TAccountTo,
      TAccountBase extends string
        ? ReadonlySignerAccount<TAccountBase> & IAccountSignerMeta<TAccountBase>
        : TAccountBase,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateAccountInstructionData = {
  discriminator: number;
  slot: bigint;
  lamports: bigint;
  space: bigint;
  owner: Address;
};

export type CreateAccountInstructionDataArgs = {
  slot: number | bigint;
  lamports: number | bigint;
  space: number | bigint;
  owner: Address;
};

export function getCreateAccountInstructionDataEncoder(): Encoder<CreateAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['slot', getU64Encoder()],
      ['lamports', getU64Encoder()],
      ['space', getU64Encoder()],
      ['owner', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 0 })
  );
}

export function getCreateAccountInstructionDataDecoder(): Decoder<CreateAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['slot', getU64Decoder()],
    ['lamports', getU64Decoder()],
    ['space', getU64Decoder()],
    ['owner', getAddressDecoder()],
  ]);
}

export function getCreateAccountInstructionDataCodec(): Codec<
  CreateAccountInstructionDataArgs,
  CreateAccountInstructionData
> {
  return combineCodec(
    getCreateAccountInstructionDataEncoder(),
    getCreateAccountInstructionDataDecoder()
  );
}

export type CreateAccountAsyncInput<
  TAccountFrom extends string = string,
  TAccountTo extends string = string,
  TAccountBase extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Funding account */
  from: TransactionSigner<TAccountFrom>;
  /** New account (pda of `[base, slot number]`) */
  to?: Address<TAccountTo>;
  /** Base account for the address derivation (defaults to `fronm`) */
  base?: TransactionSigner<TAccountBase>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  slot: CreateAccountInstructionDataArgs['slot'];
  lamports: CreateAccountInstructionDataArgs['lamports'];
  space: CreateAccountInstructionDataArgs['space'];
  owner: CreateAccountInstructionDataArgs['owner'];
};

export async function getCreateAccountInstructionAsync<
  TAccountFrom extends string,
  TAccountTo extends string,
  TAccountBase extends string,
  TAccountSystemProgram extends string,
>(
  input: CreateAccountAsyncInput<
    TAccountFrom,
    TAccountTo,
    TAccountBase,
    TAccountSystemProgram
  >
): Promise<
  CreateAccountInstruction<
    typeof EPHEMERIS_PROGRAM_ADDRESS,
    TAccountFrom,
    TAccountTo,
    TAccountBase,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = EPHEMERIS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    from: { value: input.from ?? null, isWritable: true },
    to: { value: input.to ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolver scope.
  const resolverScope = { programAddress, accounts, args };

  // Resolve default values.
  if (!accounts.base.value) {
    accounts.base.value = expectSome(accounts.from.value);
  }
  if (!accounts.to.value) {
    accounts.to = { ...accounts.to, ...(await resolveAccount(resolverScope)) };
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.to),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateAccountInstructionDataEncoder().encode(
      args as CreateAccountInstructionDataArgs
    ),
  } as CreateAccountInstruction<
    typeof EPHEMERIS_PROGRAM_ADDRESS,
    TAccountFrom,
    TAccountTo,
    TAccountBase,
    TAccountSystemProgram
  >;

  return instruction;
}

export type CreateAccountInput<
  TAccountFrom extends string = string,
  TAccountTo extends string = string,
  TAccountBase extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Funding account */
  from: TransactionSigner<TAccountFrom>;
  /** New account (pda of `[base, slot number]`) */
  to: Address<TAccountTo>;
  /** Base account for the address derivation (defaults to `fronm`) */
  base?: TransactionSigner<TAccountBase>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  slot: CreateAccountInstructionDataArgs['slot'];
  lamports: CreateAccountInstructionDataArgs['lamports'];
  space: CreateAccountInstructionDataArgs['space'];
  owner: CreateAccountInstructionDataArgs['owner'];
};

export function getCreateAccountInstruction<
  TAccountFrom extends string,
  TAccountTo extends string,
  TAccountBase extends string,
  TAccountSystemProgram extends string,
>(
  input: CreateAccountInput<
    TAccountFrom,
    TAccountTo,
    TAccountBase,
    TAccountSystemProgram
  >
): CreateAccountInstruction<
  typeof EPHEMERIS_PROGRAM_ADDRESS,
  TAccountFrom,
  TAccountTo,
  TAccountBase,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = EPHEMERIS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    from: { value: input.from ?? null, isWritable: true },
    to: { value: input.to ?? null, isWritable: true },
    base: { value: input.base ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.base.value) {
    accounts.base.value = expectSome(accounts.from.value);
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.from),
      getAccountMeta(accounts.to),
      getAccountMeta(accounts.base),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateAccountInstructionDataEncoder().encode(
      args as CreateAccountInstructionDataArgs
    ),
  } as CreateAccountInstruction<
    typeof EPHEMERIS_PROGRAM_ADDRESS,
    TAccountFrom,
    TAccountTo,
    TAccountBase,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateAccountInstruction<
  TProgram extends string = typeof EPHEMERIS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Funding account */
    from: TAccountMetas[0];
    /** New account (pda of `[base, slot number]`) */
    to: TAccountMetas[1];
    /** Base account for the address derivation (defaults to `fronm`) */
    base?: TAccountMetas[2] | undefined;
    /** The system program */
    systemProgram: TAccountMetas[3];
  };
  data: CreateAccountInstructionData;
};

export function parseCreateAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === EPHEMERIS_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      from: getNextAccount(),
      to: getNextAccount(),
      base: getNextOptionalAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateAccountInstructionDataDecoder().decode(instruction.data),
  };
}
