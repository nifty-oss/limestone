/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { type ParsedCreateAccountInstruction } from '../instructions';

export const LIMESTONE_PROGRAM_ADDRESS =
  'LMSToZQenurAeAutm239hcJBCgsaPNaJhNC7nJhrtdB' as Address<'LMSToZQenurAeAutm239hcJBCgsaPNaJhNC7nJhrtdB'>;

export enum LimestoneInstruction {
  CreateAccount,
}

export function identifyLimestoneInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LimestoneInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return LimestoneInstruction.CreateAccount;
  }
  throw new Error(
    'The provided instruction could not be identified as a limestone instruction.'
  );
}

export type ParsedLimestoneInstruction<
  TProgram extends string = 'LMSToZQenurAeAutm239hcJBCgsaPNaJhNC7nJhrtdB',
> = {
  instructionType: LimestoneInstruction.CreateAccount;
} & ParsedCreateAccountInstruction<TProgram>;
